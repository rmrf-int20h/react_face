{"version":3,"sources":["images/Emodji/anger.png","images/Emodji/fear.png","images/Emodji/happiness.png","images/Emodji/neutral.png","images/Emodji/sadness.png","images/Emodji/surprise.png","components/Button/Button.js","components/Emotions/Emotions.js","components/Spinner/Spinner.js","components/GalleryBuilder/GalleryBuilder.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","renderButton","props","react_default","a","createElement","className","buttonStyle","disabled","onClick","clicked","children","emotionsMap","name","path","anger","fear","happiness","neutral","sadness","surprise","Emotions","state","selectedEmotions","toggleEmotion","emotion","emotions","Object","toConsumableArray","_this","includes","index","indexOf","splice","push","setState","_this2","this","Boolean","length","react","map","emotionStyle","key","src","alt","onDragStart","event","preventDefault","Button_Button","submit","Component","spinner","galleryBuilder","returnHandler","photos","photoURL","instance","axios","create","baseURL","App","isLoading","isShowGallety","submitEmotions","join","get","proxyURL","concat","then","response","photosURLs","data","forEach","photoData","content","Spinner_Spinner","GalleryBuilder_GalleryBuilder","components_Emotions_Emotions","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edbe70c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anger.9da93337.png\";","module.exports = __webpack_public_path__ + \"static/media/fear.ba26a09a.png\";","module.exports = __webpack_public_path__ + \"static/media/happiness.626f72c8.png\";","module.exports = __webpack_public_path__ + \"static/media/neutral.e61d034f.png\";","module.exports = __webpack_public_path__ + \"static/media/sadness.a8e83fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/surprise.b96c9df2.png\";","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst renderButton = props => {\r\n    return (\r\n        <button \r\n            className={props.buttonStyle}\r\n            disabled={props.disabled}\r\n            onClick={props.clicked}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default renderButton;","// external\r\nimport React, { Component, Fragment } from 'react';\r\n// images\r\nimport anger from '../../images/Emodji/anger.png';\r\nimport fear from '../../images/Emodji/fear.png';\r\nimport happiness from '../../images/Emodji/happiness.png';\r\nimport neutral from '../../images/Emodji/neutral.png';\r\nimport sadness from '../../images/Emodji/sadness.png';\r\nimport surprise from '../../images/Emodji/surprise.png';\r\n\r\nimport Button from '../Button/Button';\r\n\r\n// style\r\nimport './Emotions.css';\r\n\r\nconst emotionsMap = [\r\n    {name: 'anger', path: anger},\r\n    {name: 'fear', path: fear},\r\n    {name: 'happiness', path: happiness},\r\n    {name: 'neutral', path: neutral},\r\n    {name: 'sadness', path: sadness},\r\n    {name: 'surprise', path: surprise},\r\n];\r\n\r\nclass Emotions extends Component {\r\n    state = {\r\n        selectedEmotions: []\r\n    }\r\n\r\n    toggleEmotion = emotion => {\r\n        const emotions = [...this.state.selectedEmotions];\r\n\r\n        if (this.state.selectedEmotions.includes(emotion)) {\r\n            const index = emotions.indexOf(emotion);\r\n            emotions.splice(index, 1);\r\n        } else {\r\n            emotions.push(emotion);\r\n        }\r\n\r\n        this.setState({ selectedEmotions: emotions });\r\n    }\r\n\r\n    render() {\r\n        const buttonStyle = Boolean(this.state.selectedEmotions.length) ? 'submit-button' : 'submit-button button-opacity';\r\n        return (\r\n            <Fragment>\r\n                <div className={'emotions-title'}>Select Emotions</div>\r\n                <div className={'emotion-wrapper'}>\r\n                    {emotionsMap.map((emotion, index) => {\r\n                        const emotionStyle = this.state.selectedEmotions.includes(emotion.name) ? 'emotion opacity' : 'emotion';\r\n\r\n                        return (\r\n                            <div key={index} className={emotionStyle} onClick={() => this.toggleEmotion(emotion.name)}>\r\n                                <span className=\"popover above\">{emotion.name}</span>\r\n                                <img src={emotion.path} alt=\"emotion\" onDragStart={event => event.preventDefault()} />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <Button\r\n                    buttonStyle={buttonStyle}\r\n                    disabled={!this.state.selectedEmotions.length}\r\n                    clicked={() => this.props.submit(this.state.selectedEmotions)}\r\n                >Submit</Button>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Emotions;","// external\r\nimport React from 'react';\r\n// style\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className={\"spinner-wrapper\"}>\r\n        <div className={\"hollowLoader\"}>\r\n            <div className={\"largeBox\"}></div>\r\n            <div className={\"smallBox\"}></div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default spinner;","// external\r\nimport React, { Fragment } from 'react';\r\n// internal\r\nimport Button from '../Button/Button';\r\n// style\r\nimport './GalleryBuilder.css';\r\n\r\nconst galleryBuilder = props => {\r\n    return (\r\n        <Fragment>\r\n            <Button\r\n                buttonStyle={'return-button'}\r\n                disabled={false}\r\n                clicked={props.returnHandler}\r\n            >Return</Button>\r\n            <main>\r\n                {props.photos.map((photoURL, index) => {\r\n                    return <div key={index}><img src={photoURL} alt=\"int20h\" onDragStart={event => event.preventDefault()} /></div>\r\n                })}\r\n            </main>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default galleryBuilder;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-my-burger-d5cc7.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","// external\r\nimport React, { Component, Fragment } from 'react';\r\n// internal\r\nimport Emotions from '../src/components/Emotions/Emotions';\r\nimport Spinner from '../src/components/Spinner/Spinner';\r\nimport GalleryBuilder from '../src/components/GalleryBuilder/GalleryBuilder';\r\nimport axios from './axios';\r\n// style\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        isShowGallety: false,\r\n        photos: []\r\n    }\r\n\r\n    submitEmotions = emotions => {\r\n        const selectedEmotions = emotions.join('/'),\r\n            proxyURL = \"https://cors-anywhere.herokuapp.com/\",\r\n            url = 'http://int20h-face.herokuapp.com/db_select_emotions/';\r\n\r\n        this.setState({ isLoading: true });\r\n\r\n        axios.get(proxyURL + url + `?emotions=${selectedEmotions}`)\r\n            .then(response => {\r\n                const photosURLs = [];\r\n\r\n                response.data.forEach(photoData => {\r\n                    photosURLs.push(photoData[1])\r\n                });\r\n\r\n                this.setState({\r\n                    isShowGallety: true,\r\n                    isLoading: false,\r\n                    photos: photosURLs\r\n                });\r\n            });\r\n    }\r\n\r\n    returnHandler = () => {\r\n        this.setState({ isShowGallety: false });\r\n    }\r\n\r\n    render() {\r\n        let content = <Spinner/>;\r\n\r\n        if (!this.state.isLoading) {\r\n            content = (\r\n                <Fragment>\r\n                    {this.state.isShowGallety ? <GalleryBuilder returnHandler={this.returnHandler} photos={this.state.photos} /> : <Emotions submit={this.submitEmotions}/>}\r\n                </Fragment>\r\n            );\r\n        }\r\n\r\n        return content;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}